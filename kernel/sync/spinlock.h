#pragma once

#include <stdatomic.h>
#include <stdbool.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Simple spinlock
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct spinlock {
    atomic_bool lock;
} spinlock_t;

#define INIT_SPINLOCK() ((spinlock_t){ .lock = false })

void spinlock_lock(spinlock_t* spinlock);

bool spinlock_try_lock(spinlock_t* spinlock);

void spinlock_unlock(spinlock_t* spinlock);

bool spinlock_is_locked(spinlock_t* spinlock);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Spinlock shared between in-irq and out-of-irq code
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct irq_spinlock {
    spinlock_t lock;
} irq_spinlock_t;

#define INIT_IRQ_SPINLOCK() ((irq_spinlock_t){ .lock = INIT_SPINLOCK() })

bool irq_spinlock_lock(irq_spinlock_t* spinlock);

void irq_spinlock_unlock(irq_spinlock_t* spinlock, bool irq_state);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRQ enable/disable helpers
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool irq_save();

void irq_restore(bool status);
